# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class AdminSetting(models.Model):
    id = models.IntegerField(primary_key=True)
    commission_rate = models.FloatField()
    class Meta:
        managed = False
        db_table = 'admin_setting'

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=80)
    class Meta:
        managed = False
        db_table = 'auth_group'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group_id = models.IntegerField()
    permission_id = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'auth_group_permissions'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50)
    content_type_id = models.IntegerField()
    codename = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'auth_permission'

class AuthUser(models.Model):
    id = models.IntegerField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField()
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=75)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'auth_user'

class AuthUserGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    group_id = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'auth_user_groups'

class AuthUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    permission_id = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'

class Category(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=20)
    pay = models.FloatField(blank=True, null=True)
    is_active = models.IntegerField(blank=True, null=True)
    commission_rate = models.FloatField(blank=True, null=True)
    class Meta:
        db_table = 'category'
    def __unicode__(self):
        return self.name

class Chat(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='chat_user')
    item = models.ForeignKey('Item', blank=True, related_name='item_user')
    time_stamp = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'chat'

class ChatEntry(models.Model):
    id = models.IntegerField(primary_key=True)
    chat = models.ForeignKey(Chat, blank=True, related_name='chat_entry_chat')
    message = models.CharField(max_length=100, blank=True)
    is_image = models.IntegerField(blank=True, null=True)
    from_seller = models.IntegerField(blank=True, null=True)
    time_stamp = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'chat_entry'

class Comment(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='comment_user')
    item = models.ForeignKey('Item', blank=True, related_name='comment_item')
    comment = models.TextField(blank=True)
    datetime = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'comment'

class Country(models.Model):
    code = models.CharField(primary_key=True, max_length=2)
    name = models.CharField(max_length=50, blank=True)
    class Meta:
        managed = False
        db_table = 'country'

class Currency(models.Model):
    currency_id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=5)
    country = models.CharField(max_length=50, blank=True)
    symbol = models.CharField(max_length=50, blank=True)
    class Meta:
        managed = False
        db_table = 'currency'

class DescriptionReadStatus(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='description_read_status_user')
    item = models.ForeignKey('Item', blank=True, related_name='description_read_status_item')
    class Meta:
        managed = False
        db_table = 'description_read_status'

class Device(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='device_user')
    device_token = models.CharField(max_length=100, blank=True)
    class Meta:
        managed = False
        db_table = 'device'

class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)
    action_time = models.DateTimeField()
    user_id = models.IntegerField()
    content_type_id = models.IntegerField(blank=True, null=True)
    object_id = models.TextField(blank=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.IntegerField()
    change_message = models.TextField()
    class Meta:
        managed = False
        db_table = 'django_admin_log'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'django_content_type'

class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'django_session'

class HashTag(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=50)
    class Meta:
        managed = False
        db_table = 'hash_tag'

class HashTagItem(models.Model):
    id = models.IntegerField(primary_key=True)
    item = models.ForeignKey('Item', blank=True, related_name='hash_tag_item_item')
    hash_tag = models.ForeignKey(HashTag, blank=True, related_name='hash_tag_item_hash_tag')
    comment = models.ForeignKey(Comment, blank=True, related_name='hash_tag_item_comment')
    date = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'hash_tag_item'

class InviteStatus(models.Model):
    user = models.ForeignKey('User', primary_key=True, related_name='invite_status_user')
    fb = models.IntegerField(blank=True, null=True)
    twitter = models.IntegerField(blank=True, null=True)
    weibo = models.IntegerField(blank=True, null=True)
    whatsapp = models.IntegerField(blank=True, null=True)
    email = models.IntegerField(blank=True, null=True)
    sms = models.IntegerField(blank=True, null=True)
    instagram = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'invite_status'

class Item(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=30, blank=True)
    description = models.TextField(blank=True)
    price = models.FloatField(blank=True, null=True)
    national_ship_charge = models.FloatField(blank=True, null=True)
    international_ship_charge = models.FloatField(blank=True, null=True)
    seller = models.ForeignKey('User', blank=True, related_name='item_user')
    video_path = models.CharField(max_length=100, blank=True)
    video_cover_path = models.CharField(max_length=100, blank=True)
    currency = models.ForeignKey(Currency, blank=True, related_name='item_currency')
    category = models.ForeignKey(Category, blank=True, related_name='item_category')
    no_available = models.IntegerField(blank=True, null=True)
    no_sold = models.IntegerField(blank=True, null=True)
    out_of_stock = models.IntegerField(blank=True, null=True)
    sold_out = models.IntegerField(blank=True, null=True)
    is_active = models.IntegerField(blank=True, null=True)
    trend_factor = models.FloatField(blank=True, null=True)
    meet_in_person = models.IntegerField(blank=True, null=True)
    added_on = models.DateTimeField(blank=True, null=True)
    last_updated_on = models.DateTimeField(blank=True, null=True)
    is_deleted = models.IntegerField(blank=True, null=True)
    has_shipping = models.IntegerField(blank=True, null=True)
    has_international_shipping = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'item'

class ItemLocation(models.Model):
    item = models.ForeignKey(Item, unique=True, related_name='item_location_item')
    latitude = models.FloatField()
    longitude = models.FloatField()
    place = models.CharField(max_length=100, blank=True)
    class Meta:
        managed = False
        db_table = 'item_location'

class ItemRating(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='item_rating_user')
    item = models.ForeignKey(Item, blank=True, related_name='item_rating_item')
    rating = models.FloatField()
    review = models.TextField(blank=True)
    title = models.CharField(max_length=50, blank=True)
    posted_on = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'item_rating'

class Like(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='like_user')
    item = models.ForeignKey(Item, blank=True, related_name='like_item')
    date = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'like'

class List(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=30)
    user = models.ForeignKey('User', blank=True, related_name='list_user')
    list_type = models.ForeignKey('ListType', db_column='list_type', blank=True, related_name='list_list_type')
    class Meta:
        managed = False
        db_table = 'list'

class ListItem(models.Model):
    id = models.IntegerField(primary_key=True)
    list = models.ForeignKey(List, blank=True, related_name='list_item_list')
    item = models.ForeignKey(Item, blank=True, related_name='list_item_item')
    class Meta:
        managed = False
        db_table = 'list_item'

class ListType(models.Model):
    type_name = models.CharField(primary_key=True, max_length=30)
    class Meta:
        managed = False
        db_table = 'list_type'

class Login(models.Model):
    id = models.IntegerField(primary_key=True)
    device = models.ForeignKey(Device, unique=True, blank=True, related_name='login_device')
    access_token = models.CharField(max_length=100, blank=True)
    class Meta:
        managed = False
        db_table = 'login'

class Mention(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='mention_user')
    mentioned_user = models.ForeignKey('User', blank=True, related_name='mention_mentioned_user')
    item = models.ForeignKey(Item, blank=True, related_name='mention_item')
    comment = models.ForeignKey(Comment, blank=True, related_name='mention_comment')
    class Meta:
        managed = False
        db_table = 'mention'

class Notification(models.Model):
    id = models.IntegerField(primary_key=True)
    initiated_user = models.ForeignKey('User', blank=True, related_name='notification_initiated_user')
    item = models.ForeignKey(Item, blank=True, related_name='notification_item')
    message = models.CharField(max_length=100, blank=True)
    action_type = models.ForeignKey('NotificationType', db_column='action_type', blank=True, related_name='notification_notification_type')
    time_stamp = models.DateTimeField(blank=True, null=True)
    receiver_user = models.ForeignKey('User', blank=True, related_name='notification_receiver_user')
    is_read = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'notification'

class NotificationSetting(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='notification_setting_user')
    comment = models.IntegerField(blank=True, null=True)
    like = models.IntegerField(blank=True, null=True)
    buy = models.IntegerField(blank=True, null=True)
    follow = models.IntegerField(blank=True, null=True)
    mention = models.IntegerField(blank=True, null=True)
    chat = models.IntegerField(blank=True, null=True)
    notifications = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'notification_setting'

class NotificationType(models.Model):
    notification_type = models.CharField(primary_key=True, max_length=20)
    class Meta:
        managed = False
        db_table = 'notification_type'

class Order(models.Model):
    id = models.IntegerField(primary_key=True)
    item = models.ForeignKey('Item', blank=True, related_name='order_item')
    buyer = models.ForeignKey('User', blank=True, related_name='order_user')
    total_amount = models.FloatField(blank=True, null=True)
    date = models.DateTimeField(blank=True, null=True)
    shipping_address = models.ForeignKey('ShippingAddress', blank=True, related_name='order_shipping_address')
    class Meta:
        managed = False
        db_table = 'order'

class Report(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='report_user')
    item = models.ForeignKey(Item, blank=True, related_name='report_item')
    class Meta:
        managed = False
        db_table = 'report'

class ShareStatus(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='share_status_user')
    item = models.ForeignKey(Item, blank=True, related_name='share_status_item')
    fb = models.IntegerField(blank=True, null=True)
    twitter = models.IntegerField(blank=True, null=True)
    weibo = models.IntegerField(blank=True, null=True)
    whatsapp = models.IntegerField(blank=True, null=True)
    email = models.IntegerField(blank=True, null=True)
    sms = models.IntegerField(blank=True, null=True)
    instagram = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'share_status'

class ShippingAddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('User', blank=True, related_name='shipping_address_user')
    name = models.CharField(max_length=30, blank=True)
    address = models.CharField(max_length=100, blank=True)
    city = models.CharField(max_length=30, blank=True)
    street = models.CharField(max_length=30, blank=True)
    postal_code = models.IntegerField(blank=True, null=True)
    country = models.CharField(max_length=30, blank=True)
    phone = models.CharField(max_length=20, blank=True)
    class Meta:
        managed = False
        db_table = 'shipping_address'

class StaffPick(models.Model):
    id = models.IntegerField(primary_key=True)
    item = models.ForeignKey(Item, blank=True, related_name='staff_pick_item')
    country_code = models.ForeignKey(Country, db_column='country_code', blank=True, related_name='staff_pick_country_code')
    date = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'staff_pick'

class User(models.Model):
    id = models.IntegerField(primary_key=True)
    username = models.CharField(unique=True, max_length=100)
    email = models.CharField(unique=True, max_length=100)
    password = models.CharField(max_length=100)
    verified = models.IntegerField(blank=True, null=True)
    full_name = models.CharField(max_length=100, blank=True)
    jabber_id = models.CharField(max_length=100, blank=True)
    photo_path = models.CharField(max_length=150, blank=True)
    first_login = models.IntegerField(blank=True, null=True)
    is_admin = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'user'

class UserLocation(models.Model):
    user = models.ForeignKey(User, unique=True, related_name='user_location_user')
    lat = models.FloatField(blank=True, null=True)
    long = models.FloatField(blank=True, null=True)
    country_code = models.ForeignKey(Country, db_column='country_code', blank=True, related_name='user_location_country_code')
    class Meta:
        managed = False
        db_table = 'user_location'

class UserPaypalAccount(models.Model):
    user = models.ForeignKey(User, primary_key=True, related_name='user_paypal_account_user')
    paypal_email = models.CharField(max_length=50, blank=True)
    class Meta:
        managed = False
        db_table = 'user_paypal_account'

class UserUser(models.Model):
    user_id = models.IntegerField()
    fol_user_id = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'user_user'

